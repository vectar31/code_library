Basic Optimizations:

1. Arrays are faster than vector, but vector<bool> is much faster than bool array[].

2. Unsigned array , vectors are faster than signed one.

3. Arithmetic operations are faster on unsigned than signed ones.

4. Specially in number theory we some how use GCD (iterative or recursive) but there is another version is binary GCD,
which is  60% faster, and it is available in library #include<algorithm> , __gcd(z,y);

5. Constant optimization which varies for problem to problem.

6. While performing mod operation (which is very costly) always be careful , try to. Less mod operation better running time.

7. (Extended Euclid is much faster than Fermet method for inverse).

8. IO Speeds : getchar_unlocked > getchar > cin,cout with syncwithstdio(false) > scanf,printf > cin,cout

9. strstr in char array is faster that s.find in string 

10. Hidden function (not really hidden but not used often one)

__gcd(value1, value2)
You don't need to code Euclidean Algorithm for a gcd function, from now on we can use. This function returns gcd of two numbers.
e.g. __gcd(18, 27) = 9.


__builtin_ffs(x)
This function returns 1 + least significant 1-bit of x. If x == 0, returns 0. Here x is int, this function with suffix 'l' gets a long argument and with suffix 'll' gets a long long argument.
e.g. __builtin_ffs(10) = 2 because 10 is '...10 1 0' in base 2 and first 1-bit from right is at index 1 (0-based) and function returns 1 + index.

__builtin_clz(x)
This function returns number of leading 0-bits of x which starts from most significant bit position. x is unsigned int and like previous function this function with suffix 'l gets a unsigned long argument and with suffix 'll' gets a unsigned long long argument. If x == 0, returns an undefined value.
e.g. __builtin_clz(16) = 27 because 16 is ' ... 10000'. Number of bits in a unsigned int is 32. so function returns 32 â€” 5 = 27.

__builtin_ctz(x)
This function returns number of trailing 0-bits of x which starts from least significant bit position. x is unsigned int and like previous function this function with suffix 'l' gets a unsigned long argument and with suffix 'll' gets a unsigned long long argument. If x == 0, returns an undefined value.
e.g. __builtin_ctz(16) = 4 because 16 is '...1 0000 '. Number of trailing 0-bits is 4.

__builtin_popcount(x)
This function returns number of 1-bits of x. x is unsigned int and like previous function this function with suffix 'l' gets a unsigned long argument and with suffix 'll' gets a unsigned long long argument. If x == 0, returns an undefined value.
e.g. __builtin_popcount(14) = 3 because 14 is '... 111 0' and has three 1-bits.


11.
Using auto to declare dataypes can save lot of time during programming contests.

When a variable is defined as auto, compiler determines its type during compile-time. For example,
auto a = 1; // a will become 'int'
auto b = 1LL; // b will become 'long long'
auto c = 1.0; // c will become 'double'
auto d = "variable"; // d will become 'string'

This is extremely useful when dealing with iterators. For iterating over map<int,vector<int>> Map, instead of writing this,
for(map<int,vector<int>>:: iterator it = Map.begin(); it != Map.end(); it++ ){}

it is possible to write this.
for(auto it = Map.begin(); it != Map.end(); it++ ){}

There is an even shorter way to write it.
for(auto &it : Map){}
These type of loops are called range based loops, previously which was supported by java only. Note that, it is not an iterator in range based loops. So for accessing elements, it. should be used instead of it->.

N.B. These are C++11 features, which is supported by all major online judges. Will not work for earlier versions.


12.
Bit Hacks :
https://graphics.stanford.edu/~seander/bithacks.html

13.
